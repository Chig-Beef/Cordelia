program := { statement }

statement :=
    fun ["(" type [ref] ident ")"] ident "("(type ident ",")+")" block
    mut type ident ["=" expression] el
    const type ident "=" expression el
    noas type ident ["=" expression] el
    loop [type ident "=" expression] el [comparison] el [ident "=" expression] el block
    if comparison block ([elif comparison block])+ [else block]
    ident "=" expression el
    call el

call := ident "(" (value ",")+ ")"

block := "{" { statement } "}"

ref := "@" | "&"

expression := value [operator value]

comparison := value [boperator value]

operator := "+" | "-" | "*" | "/" | "**" | "//" | "%"

boperator := "&&" | "||" | "!=" | "==" | "<" | ">" | "<=" | ">="

el := ";"

value := ident | primary | call