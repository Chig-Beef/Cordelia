program := { statement }

block := "{" { statement } "}"

statement :=
    fun ["(" type [ref] ident ")"] ident "("(type ident ",")+")" block
    stt ident "{" (type ident ",")+ "}"
    mut type ident ["=" expression] el
    const type ident "=" expression el
    noas type ident ["=" expression] el
    loop [type ident "=" expression] el [comparison] el [ident "=" expression] el block
    if comparison block ([elif comparison block])+ [else block]
    ident "=" expression el
    call el

comparison := expression [boperator expression]

expression := value [operator value]

operator := "+" | "-" | "*" | "/" | "**" | "//" | "%"

boperator := "&&" | "||" | "!=" | "==" | "<" | ">" | "<=" | ">="

call := ident "(" (value ",")+ ")"

value := ident | primary | call | access

access := indent "." (ident | call | access)

ref := "@" | "&"

el := ";"